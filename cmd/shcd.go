/*
Copyright 2021 Hewlett Packard Enterprise Development LP
*/

package cmd

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"github.com/xeipuuv/gojsonschema"
)

const schemaFile = "internal/files/shcd-schema.json"
const hmn_connections = "hmn_connections.json"

var createHMN bool

// initCmd represents the init command
var shcdCmd = &cobra.Command{
	Use:   "shcd FILEPATH",
	Short: "Generates hmn_connections.json and switch_metadata.csv from an SHCD JSON file",
	Long: `Generates hmn_connections.json and switch_metadata.csv from an SHCD JSON file.

	It accepts only a valid JSON file, generated by 'canu', which is creates a machine-
	readable format understood by csi.  It is checked against a pre-defined schema and
	if it adhere's to it, it generates the necessary seed files.
	`,
	Args: cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		v := viper.GetViper()
		v.BindPFlags(cmd.Flags())

		// Validate the file passed against the pre-defined schema
		validSHCD, err := ValidateSchema(args[0], schemaFile)

		if err != nil {
			log.Fatalf(err.Error())
		}

		// If the file meets the schema criteria
		if validSHCD {

			// Open the file since we know it is valid
			shcdFile, err := ioutil.ReadFile(args[0])

			if err != nil {
				log.Fatalf(err.Error())
			}

			// Parse the JSON and return an Shcd object
			s, err := ParseSHCD(shcdFile)

			if err != nil {
				log.Fatalf(err.Error())
			}

			// Pretty print the structured data
			shcd, err := json.MarshalIndent(&s, "", " ")

			if err != nil {
				log.Fatalf(err.Error())
			}

			if v.IsSet("hmn-connections") {

				createHMNSeed(shcdFile, hmn_connections)

			}

			// TODO: instead of printing the entire thing, create some of the seed file automatically
			fmt.Println(string(shcd))

		} else {

			log.Printf("- %s\n", err)

			if err != nil {
				log.Fatalf(err.Error())
			}

		}
	},
}

func init() {
	shcdCmd.DisableAutoGenTag = true
	shcdCmd.Flags().SortFlags = true
	shcdCmd.Flags().BoolVarP(&createHMN, "hmn-connections", "H", false, "Generate the hmn_connections.json file")
}

// The Shcd type represents the entire machine-readable SHCD inside a go struct
type Shcd []Id

// The Id type represents all of the information needed for
type Id struct {
	Architecture string   `json:"architecture"`
	CommonName   string   `json:"common_name"`
	ID           int      `json:"id"`
	Location     Location `json:"location"`
	Model        string   `json:"model"`
	Ports        []Port   `json:"ports"`
	Type         string   `json:"type"`
	Vendor       string   `json:"vendor"`
}

// The Port type defines where things are plugged in
type Port struct {
	DestNodeID int    `json:"destination_node_id"`
	DestPort   int    `json:"destination_port"`
	DestSlot   string `json:"destination_slot"`
	Port       int    `json:"port"`
	Slot       string `json:"slot"`
	Speed      int    `json:"speed"`
}

type Location struct {
	Elevation string `json:"elevation"`
	Rack      string `json:"rack"`
}

// HMNConnections type is the go equivalent structure of hmn_connections.json
type HMNConnections []HMNComponent

// HMNComponent is an individual component in the HMNConnections slice
type HMNComponent struct {
	Source              string
	SourceRack          string
	SourceLocation      string
	SourceSubLocation   string
	DestinationRack     string
	DestinationLocation int
	DestinationPort     string
}

// createHMNSeed creates hmn_connections.json using information from the shcd
func createHMNSeed(s []byte, f string) {

	var shcd Shcd
	var hmn HMNConnections

	// unmarshall it
	err := json.Unmarshal(s, &shcd)

	if err != nil {
		fmt.Println("error:", err)
	}

	// For each entry in the shcd
	for i := range shcd {

		// Create a new HMNComponent type and append it to the HMNConnections slice
		hmn = append(hmn, HMNComponent{
			Source:         shcd[i].CommonName,
			SourceRack:     shcd[i].Location.Rack,
			SourceLocation: shcd[i].Location.Elevation,
		})

	}

	// Indent the file for better human-readability
	file, _ := json.MarshalIndent(hmn, "", " ")

	// Write the file to disk
	_ = ioutil.WriteFile(hmn_connections, file, 0644)

	log.Printf("Created %v from SHCD data\n", hmn_connections)

}

// ValidateSchema compares a JSON file to the defined schema file
func ValidateSchema(f string, s string) (bool, error) {
	// First validate the file passed in conforms to the schema
	schema := "file://" + s
	schemaLoader := gojsonschema.NewReferenceLoader(schema)
	jsonFile := "file://" + f
	documentLoader := gojsonschema.NewReferenceLoader(jsonFile)

	result, err := gojsonschema.Validate(schemaLoader, documentLoader)

	if err != nil {
		return false, fmt.Errorf("%s", err)
	}

	// If the json passed in does not meet the schema requirements, error
	if !result.Valid() {

		for _, desc := range result.Errors() {
			return false, fmt.Errorf("SHCD schema error: %s", desc)
		}

	}

	return true, nil
}

// ParseSHCD accepts a machine-readable SHCD and produces an Shcd object, which can be used throughout csi
// It is the golang and csi equivalent of the shcd.json file generated by canu
func ParseSHCD(f []byte) (Shcd, error) {
	var shcd Shcd

	// unmarshall it
	err := json.Unmarshal(f, &shcd)

	if err != nil {
		fmt.Println("error:", err)
		return shcd, err
	}

	return shcd, nil
}
