/*
Copyright 2021 Hewlett Packard Enterprise Development LP
*/

package cmd

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

const hmn_connections = "hmn_connections.json"

// initCmd represents the init command
var shcdCmd = &cobra.Command{
	Use:   "shcd FILEPATH",
	Short: "Generates hmn_connections.json and switch_metadata.csv from an SHCD JSON file",
	Long: `Generates hmn_connections.json and switch_metadata.csv from an SHCD JSON file.

	It accepts only a valid JSON file, generated by 'canu', which is creates a machine-
	readable format understood by csi.
	`,
	Args: cobra.MinimumNArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		v := viper.GetViper()
		v.BindPFlags(cmd.Flags())

		// Open the file
		shcdFile, err := ioutil.ReadFile(args[0])

		if err != nil {
			log.Fatalf(err.Error())
		}

		// Parse the JSON and return an Shcd object
		s, err := ParseSHCD(shcdFile)

		if err != nil {
			log.Fatalf(err.Error())
		}

		// Pretty print the structured data
		shcd, err := json.MarshalIndent(s, "", "  ")

		if err != nil {
			log.Fatalf(err.Error())
		}

		fmt.Println(string(shcd))
	},
}

func init() {
	shcdCmd.DisableAutoGenTag = true
	shcdCmd.Flags().SortFlags = true
}

// The Shcd type represents the entire machine-readable SHCD inside a go struct
type Shcd []Id

// The Id type represents all of the information needed for
type Id struct {
	Architecture string   `json:"architecture"`
	CommonName   string   `json:"common_name"`
	ID           int      `json:"id"`
	Location     Location `json:"location"`
	Model        string   `json:"model"`
	Ports        []Port   `json:"ports"`
	Type         string   `json:"type"`
	Vendor       string   `json:"vendor"`
}

// The Port type defines where things are plugged in
type Port struct {
	DestNodeID int    `json:"destination_node_id"`
	DestPort   int    `json:"destination_port"`
	DestSlot   string `json:"destination_slot"`
	Port       int    `json:"port"`
	Slot       string `json:"slot"`
	Speed      int    `json:"speed"`
}

type Location struct {
	Elevation string `json:"elevation"`
	Rack      string `json:"rack"`
}

// ParseSHCD accepts a machine-readable SHCD and produces an Shcd object, which can be used throughout csi
func ParseSHCD(f []byte) (Shcd, error) {
	var shcd Shcd

	// unmarshall it
	err := json.Unmarshal(f, &shcd)

	if err != nil {
		fmt.Println("error:", err)
		return shcd, err
	}

	return shcd, nil
}
