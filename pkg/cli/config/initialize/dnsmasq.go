/*
 MIT License

 (C) Copyright 2022-2024 Hewlett Packard Enterprise Development LP

 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
*/

package initialize

import (
	"fmt"
	"net"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/spf13/viper"

	csiFiles "github.com/Cray-HPE/cray-site-init/internal/files"
	"github.com/Cray-HPE/cray-site-init/pkg/networking"
)

// SubnetConfigDHCPOnlyTemplate handles subnet definitions with reduced DHCP options.
var SubnetConfigDHCPOnlyTemplate = []byte(`
{{- /* remove leading whitespace */ -}}
#
## This file was generated by cray-site-init.
#
# {{.NetName}}:
server=/{{.NetName | lower}}/
address=/{{.NetName | lower}}/
dhcp-option=interface:{{.InterfaceName}},option:domain-search,{{.NetName | lower}}
interface-name=pit.{{.NetName | lower}},{{.InterfaceName}}
interface={{.InterfaceName}}
cname=packages.{{.NetName | lower}},pit.{{.NetName | lower}}
cname=registry.{{.NetName | lower}},pit.{{.NetName | lower}}
dhcp-option=interface:{{.InterfaceName}},option:router,{{.Gateway}}
dhcp-range=interface:{{.InterfaceName}},{{.DHCPStart}},{{.DHCPEnd}},10m
`)

// SubnetConfigTemplate handles subnet definitions for DNSMasq.
var SubnetConfigTemplate = []byte(`
{{- /* remove leading whitespace */ -}}
#
## This file was generated by cray-site-init.
#
# {{.NetName}}:
server=/{{.NetName | lower}}/
address=/{{.NetName | lower}}/
domain=nmn,{{.CIDR.IP}},{{.DHCPEnd}},local
interface-name=pit.{{.NetName | lower}},{{.InterfaceName}}
dhcp-option=interface:{{.InterfaceName}},option:domain-search,{{.NetName | lower}}
interface={{.InterfaceName}}
cname=packages.{{.NetName | lower}},pit.{{.NetName | lower}}
{{ if eq .NetName "MTL" -}}
cname=packages.local,pit.{{.NetName | lower}}
{{ end -}}
cname=registry.{{.NetName | lower}},pit.{{.NetName | lower}}
dhcp-option=interface:{{.InterfaceName}},option:dns-server,{{.PITServer}}
dhcp-option=interface:{{.InterfaceName}},option:ntp-server,{{.PITServer}}
dhcp-option=interface:{{.InterfaceName}},option:router,{{.Gateway}}
dhcp-range=interface:{{.InterfaceName}},{{.DHCPStart}},{{.DHCPEnd}},10m
`)

// StaticConfigTemplate manages the static portion of the DNSMasq configuration
// Systems with onboard NICs will have a MTL MAC. Others will also use the NMN
var StaticConfigTemplate = []byte(`
{{- /* remove leading whitespace */ -}}
#
## This file was generated by cray-site-init.
#
# Static Configurations
{{range .NCNS}}
# DHCP Entries for {{.Hostname}}
dhcp-host=id:{{.Xname}},set:{{.Hostname}},{{.Bond0Mac0}},{{.Bond0Mac1}},{{.MtlIP}},{{.Hostname}},20m # MTL
dhcp-host=id:{{.Xname}},set:{{.Hostname}},{{.Bond0Mac0}},{{.Bond0Mac1}},{{.NmnIP}},{{.Hostname}},20m # Bond0 Mac0/Mac1
dhcp-host=id:{{.Xname}},set:{{.Hostname}},{{.Bond0Mac0}},{{.Bond0Mac1}},{{.HmnIP}},{{.Hostname}},20m # HMN
{{ if eq $.BICAN "CAN" -}}
dhcp-host=id:{{.Xname}},set:{{.Hostname}},{{.Bond0Mac0}},{{.Bond0Mac1}},{{.CanIP}},{{.Hostname}},20m # CAN
{{ end -}}
dhcp-host={{.BmcMac}},{{.BmcIP}},{{.Hostname}}-mgmt,20m #HMN
# Host Record Entries for {{.Hostname}}
{{ if eq $.BICAN "CAN" -}}
host-record={{.Hostname}},{{.Hostname}}.can,{{.CanIP}}
{{ end -}}
host-record={{.Hostname}},{{.Hostname}}.hmn,{{.HmnIP}}
host-record={{.Hostname}},{{.Hostname}}.nmn,{{.NmnIP}}
host-record={{.Hostname}},{{.Hostname}}.mtl,{{.MtlIP}}
host-record={{.Xname}},{{.Hostname}}.nmn,{{.NmnIP}}
host-record={{.Hostname}}-mgmt,{{.Hostname}}-mgmt.hmn,{{.BmcIP}}
# Override root-path with {{.Hostname}}'s xname
dhcp-option-force=tag:{{.Hostname}},17,{{.Xname}}
{{end}}
# Virtual IP Addresses for k8s and the rados gateway
host-record=kubeapi-vip,kubeapi-vip.nmn,{{.KUBEVIP}} # k8s-virtual-ip
host-record=rgw-vip,rgw-vip.nmn,{{.RGWVIP}} # rgw-virtual-ip
host-record={{.APIGWALIASES}},{{.APIGWIP}} # api gateway

cname=kubernetes-api.vshasta.io,ncn-m001
`)

// DNSMasqBootstrapNetwork holds information for configuring DNSMasq on the LiveCD
type DNSMasqBootstrapNetwork struct {
	Subnet    networking.IPV4Subnet
	Interface string
}

// WriteDNSMasqConfig writes the dnsmasq configuration files necssary for installation
func WriteDNSMasqConfig(
	path string, v *viper.Viper, bootstrap []LogicalNCN, networks map[string]*networking.IPV4Network,
) {
	bicanNetworkName := v.GetString("bican-user-network-name")
	for i, tmpNcn := range bootstrap {
		for _, tmpNet := range tmpNcn.Networks {
			if tmpNet.NetworkName == "NMN" {
				tmpNcn.NmnIP = tmpNet.IPAddress
			}
			if tmpNet.NetworkName == "CAN" {
				tmpNcn.CanIP = tmpNet.IPAddress
			}
			if tmpNet.NetworkName == "MTL" {
				tmpNcn.MtlIP = tmpNet.IPAddress
			}
			if tmpNet.NetworkName == "HMN" {
				tmpNcn.HmnIP = tmpNet.IPAddress
			}
		}
		bootstrap[i] = tmpNcn
	}
	var kubevip, rgwvip string
	nmnSubnet, _ := networks["NMN"].LookUpSubnet("bootstrap_dhcp")
	for _, reservation := range nmnSubnet.IPReservations {
		if reservation.Name == "kubeapi-vip" {
			kubevip = reservation.IPAddress.String()
		}
		if reservation.Name == "rgw-vip" {
			rgwvip = reservation.IPAddress.String()
		}
	}

	var apigwAliases, apigwIP string
	nmnlbNet, _ := networks["NMNLB"].LookUpSubnet("nmn_metallb_address_pool")
	apigw := nmnlbNet.ReservationsByName()["istio-ingressgateway"]
	apigwAliases = strings.Join(
		apigw.Aliases,
		",",
	)
	apigwIP = apigw.IPAddress.String()

	data := struct {
		NCNS         []LogicalNCN
		KUBEVIP      string
		RGWVIP       string
		APIGWALIASES string
		APIGWIP      string
		BICAN        string
	}{
		bootstrap,
		kubevip,
		rgwvip,
		apigwAliases,
		apigwIP,
		bicanNetworkName,
	}

	funcMap := template.FuncMap{
		// The name "title" is what the function will be called in the template text.
		"lower": strings.ToLower,
	}

	// Shasta Networks:
	netCMN, _ := template.New("cmnconfig").Funcs(funcMap).Parse(string(SubnetConfigDHCPOnlyTemplate))
	netHMN, _ := template.New("hmnconfig").Funcs(funcMap).Parse(string(SubnetConfigTemplate))
	netNMN, _ := template.New("nmnconfig").Funcs(funcMap).Parse(string(SubnetConfigTemplate))
	netMTL, _ := template.New("mtlconfig").Funcs(funcMap).Parse(string(SubnetConfigTemplate))
	writeConfig(
		"CMN",
		path,
		*netCMN,
		networks,
	)
	writeConfig(
		"HMN",
		path,
		*netHMN,
		networks,
	)
	writeConfig(
		"NMN",
		path,
		*netNMN,
		networks,
	)
	writeConfig(
		"MTL",
		path,
		*netMTL,
		networks,
	)

	var netIPAM *template.Template
	if bicanNetworkName == "CAN" || v.GetBool("retain-unused-user-network") {
		netCAN, _ := template.New("canconfig").Funcs(funcMap).Parse(string(SubnetConfigDHCPOnlyTemplate))
		writeConfig(
			bicanNetworkName,
			path,
			*netCAN,
			networks,
		)
	}

	// Expected NCNs (and other devices) reserved DHCP leases:
	netIPAM, _ = template.New("statics").Parse(string(StaticConfigTemplate))
	csiFiles.WriteTemplate(
		filepath.Join(
			path,
			"dnsmasq.d/statics.conf",
		),
		netIPAM,
		data,
	)
}

func writeConfig(
	name, path string, tpl template.Template, networks map[string]*networking.IPV4Network,
) {
	// Pointer to the IPV4Network
	tempNet := networks[name]

	v := viper.GetViper()

	// Pointer to the subnet
	bootstrapSubnet, _ := tempNet.LookUpSubnet("bootstrap_dhcp")
	// Create a subnet copy (avoid modifying the base data with dnsmasq overrides)
	tempSubnet := *bootstrapSubnet

	// Look up the PIT IP for the network
	for _, reservation := range tempSubnet.IPReservations {
		if reservation.Name == v.GetString("install-ncn") {
			tempSubnet.PITServer = reservation.IPAddress
		}
	}
	if tempNet.Name == "CAN" {
		tempSubnet.Gateway = net.ParseIP(v.GetString("can-gateway"))
	}
	if tempNet.Name == "CMN" {
		tempSubnet.Gateway = net.ParseIP(v.GetString("cmn-gateway"))
	}

	nmnLBSubnet, _ := networks["NMNLB"].LookUpSubnet("nmn_metallb_address_pool")
	tempSubnet.DNSServer = nmnLBSubnet.LookupReservation("unbound").IPAddress
	csiFiles.WriteTemplate(
		filepath.Join(
			path,
			fmt.Sprintf(
				"dnsmasq.d/%v.conf",
				name,
			),
		),
		&tpl,
		tempSubnet,
	)
}
