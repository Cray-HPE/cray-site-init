/*
 MIT License

 (C) Copyright 2022-2025 Hewlett Packard Enterprise Development LP

 Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
*/

package initialize

import (
	"log"
	"path/filepath"
	"regexp"
	"strings"
	"text/template"

	"github.com/spf13/viper"

	csiFiles "github.com/Cray-HPE/cray-site-init/internal/files"

	"github.com/Cray-HPE/cray-site-init/pkg/networking"
)

// MetalLBCRDTemplate manages the CRD for MetalLB
var MetalLBCRDTemplate = []byte(`
{{- /* remove leading whitespace */ -}}
#
## This file was generated by cray-site-init.
#
{{- range $index, $peer := .PeerSwitches }}
---
apiVersion: metallb.io/v1beta1
kind: BGPPeer
metadata:
  namespace: metallb-system
  name: bgp-peer-{{ $index }}
spec:
  peerAddress: {{ $peer.IPAddress }}
  peerASN: {{ $peer.PeerASN }}
  myASN: {{ $peer.MyASN }}
{{- end }}
{{- range $index, $pool := .Networks }}
---
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  namespace: metallb-system
  name: ip-pool-{{ $index }}
spec:
  addresses:
  {{- range $subnet := $pool.Addresses }}
  - {{ $subnet }}
  {{- end }}
{{- end }}
`)

// PeerDetail holds information about each of the BGP routers that we peer with in MetalLB
type PeerDetail struct {
	IPAddress string `yaml:"peer-address" valid:"_,required"`
	PeerASN   int    `yaml:"peer-asn" valid:"_,required"`
	MyASN     int    `yaml:"my-asn" valid:"_,required"`
}

// AddressPoolDetail holds information about each of the MetalLB address pools
type AddressPoolDetail struct {
	Name      string   `yaml:"name" valid:"_,required"`
	Protocol  string   `yaml:"protocol" valid:"_,required"`
	Addresses []string `yaml:"addresses" valid:"required"`
}

// MetalLBCRD holds information needed by the MetalLBCRDTemplate
type MetalLBCRD struct {
	LeafSwitches  []PeerDetail
	PeerSwitches  []PeerDetail
	SpineSwitches []PeerDetail
	EdgeSwitches  []PeerDetail
	Networks      []AddressPoolDetail
}

// GetMetalLBConfig gathers the information for the MetalLB CRD
func GetMetalLBConfig(
	v *viper.Viper, networks map[string]*networking.IPV4Network, switches []*networking.ManagementSwitch,
) MetalLBCRD {

	var configStruct MetalLBCRD

	var bgpPeers = v.GetStringSlice("bgp-peer-types")

	spineSwitchNameRegexp := regexp.MustCompile(`sw-spine-\d{3}`)
	leafSwitchNameRegexp := regexp.MustCompile(`sw-leaf-\d{3}`)
	edgeSwitchNameRegexp := regexp.MustCompile(`chn-switch-\d`)

	for name, network := range networks {
		for _, subnet := range network.Subnets {
			// This is a v1.4 HACK related to the supernet.
			if (name == "NMN" || name == "CMN") && subnet.Name == "network_hardware" {
				var tmpPeer PeerDetail
				for _, reservation := range subnet.IPReservations {
					tmpPeer = PeerDetail{}
					tmpPeer.PeerASN = network.PeerASN
					tmpPeer.MyASN = network.MyASN
					tmpPeer.IPAddress = reservation.IPAddress.String()
					if spineSwitchNameRegexp.FindString(reservation.Name) != "" {
						configStruct.SpineSwitches = append(
							configStruct.SpineSwitches,
							tmpPeer,
						)
					}
					if leafSwitchNameRegexp.FindString(reservation.Name) != "" {
						configStruct.LeafSwitches = append(
							configStruct.LeafSwitches,
							tmpPeer,
						)
					}
				}
			} else if name == "CHN" && subnet.Name == "bootstrap_dhcp" {
				var tmpPeer PeerDetail
				for _, reservation := range subnet.IPReservations {
					tmpPeer = PeerDetail{}
					tmpPeer.PeerASN = network.PeerASN
					tmpPeer.MyASN = network.MyASN
					tmpPeer.IPAddress = reservation.IPAddress.String()
					if edgeSwitchNameRegexp.FindString(reservation.Name) != "" {
						configStruct.EdgeSwitches = append(
							configStruct.EdgeSwitches,
							tmpPeer,
						)
					}
				}
			}
			if strings.Contains(
				subnet.Name,
				"metallb",
			) {
				tmpAddPool := AddressPoolDetail{}
				tmpAddPool.Name = subnet.MetalLBPoolName
				tmpAddPool.Protocol = "bgp"
				tmpAddPool.Addresses = append(
					tmpAddPool.Addresses,
					subnet.CIDR.String(),
				)
				configStruct.Networks = append(
					configStruct.Networks,
					tmpAddPool,
				)
			}
		}
	}

	configStruct.PeerSwitches = getMetalLBPeerSwitches(
		bgpPeers,
		configStruct,
	)

	return configStruct
}

// WriteMetalLBCRD creates the yaml CRD
func WriteMetalLBCRD(
	path string, v *viper.Viper, networks map[string]*networking.IPV4Network, switches []*networking.ManagementSwitch,
) {

	tpl, err := template.New("mtllbcrd").Parse(string(MetalLBCRDTemplate))
	if err != nil {
		log.Printf(
			"The template failed to render because: %v \n",
			err,
		)
	}

	configStruct := GetMetalLBConfig(
		v,
		networks,
		switches,
	)

	csiFiles.WriteTemplate(
		filepath.Join(
			path,
			"metallb.yaml",
		),
		tpl,
		configStruct,
	)
}

// getMetalLBPeerSwitches returns a list of switches that should be used as MetalLB peers
func getMetalLBPeerSwitches(
	bgpPeers []string, configStruct MetalLBCRD,
) []PeerDetail {

	switchTypeMap := map[string][]PeerDetail{
		"spine": configStruct.SpineSwitches,
		"leaf":  configStruct.LeafSwitches,
		"edge":  configStruct.EdgeSwitches,
	}

	for _, peerType := range bgpPeers {
		if peerSwitches, ok := switchTypeMap[peerType]; ok {
			if len(peerSwitches) == 0 {
				log.Fatalf(
					"bgp-peer-types: %s specified but none defined in switch_metadata.csv\n",
					peerType,
				)
			}
			configStruct.PeerSwitches = append(
				configStruct.PeerSwitches,
				peerSwitches...,
			)
		} else {
			log.Fatalf(
				"bgp-peer-types: unrecognized option: %s\n",
				peerType,
			)
		}
	}

	return configStruct.PeerSwitches
}
